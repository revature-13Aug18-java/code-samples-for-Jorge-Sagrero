DROP TABLE USERACCOUNT;
DROP TABLE USERCREDENTIALS;
CREATE TABLE USERCREDENTIALS (USERNAME VARCHAR2(50), PSWRD VARCHAR2(50),FIRSTNAME VARCHAR2(50),
LASTNAME VARCHAR2(50),  
LOGGEDIN VARCHAR2(7),ACCOUNTNUMBER NUMBER(3,0) CONSTRAINT PK_ACCOUNTNUMBER PRIMARY KEY );

CREATE TABLE USERACCOUNT ( ACCOUNTBALANCE NUMBER(8,2), 
ACCOUNTNUMBER NUMBER(3,0) CONSTRAINT FK_ACCOUNTNUMBER REFERENCES USERCREDENTIALS ); 

CREATE OR REPLACE PROCEDURE DEPOSIT(ACCID USERACCOUNT.ACCOUNTNUMBER%TYPE, AMMOUNT USERACCOUNT.ACCOUNTBALANCE%TYPE)
IS
BEGIN
    UPDATE USERACCOUNT
    SET ACCOUNTBALANCE = ACCOUNTBALANCE + AMMOUNT
    WHERE ACCOUNTNUMBER = ACCID;
END;
/

CREATE OR REPLACE PROCEDURE WITHDRAWAL( ACCID USERACCOUNT.ACCOUNTNUMBER%TYPE, AMMOUNT USERACCOUNT.ACCOUNTBALANCE%TYPE)
IS
BEGIN
    UPDATE USERACCOUNT
    SET ACCOUNTBALANCE = ACCOUNTBALANCE - AMMOUNT
    WHERE ACCOUNTNUMBER = ACCID;
END;
/

COMMIT;

INSERT INTO USERCREDENTIALS (USERNAME, PSWRD, FIRSTNAME, LASTNAME, LOGGEDIN, ACCOUNTNUMBER) VALUES ('JSAGREROPEREZ@GMAIL.COM', 'PASSWORD123','JORGE','SAGRERO','TRUE',1);
INSERT INTO USERACCOUNT (ACCOUNTBALANCE,ACCOUNTNUMBER) VALUES (500,1);

INSERT INTO USERCREDENTIALS (USERNAME, PSWRD, FIRSTNAME, LASTNAME, LOGGEDIN, ACCOUNTNUMBER) VALUES ('M@YMAIL.COM', 'ASSWORD123','MIRANDA','LAWSON','TRUE',2);
INSERT INTO USERACCOUNT (ACCOUNTBALANCE,ACCOUNTNUMBER) VALUES (500,2);
--DELETE USERACCOUNT;
--DELETE USERCREDENTIALS;
COMMIT WORK;

-- STORED PROCEDURE TO CHECK IF USERNAME EXISTS
-- WE DON'T SPECIFY THE VARIABLE LENGTH OF VAL BELOW SINCE ORACLE DETERMINES THAT FROM THE CALL OF THE PROCEDURE
--RETURNS FALSE IF USERNAME IS TAKEN
CREATE OR REPLACE FUNCTION USERNAME_VALIDATE(USERN USERCREDENTIALS.USERNAME%TYPE)
    RETURN VARCHAR2
AS
    VALID VARCHAR2(7);
    ANY_ROWS_FOUND NUMBER;
BEGIN 

    SELECT COUNT(*)
    INTO ANY_ROWS_FOUND
    FROM USERCREDENTIALS
    WHERE  ROWNUM = 1 AND USERN = USERNAME;
    IF ANY_ROWS_FOUND = 1 THEN
    VALID := 'FALSE';
    ELSE
    VALID := 'TRUE';
    END IF;
    RETURN VALID;
END;
/
SET SERVEROUTPUT ON;

DECLARE
USERN USERCREDENTIALS.USERNAME%TYPE;
HOLDER VARCHAR2(7);
BEGIN 
    USERN := 'JSAGREROPEREZ@GMAIL.COM';
    HOLDER := USERNAME_VALIDATE(USERN);
   dbms_output.put_line('USERNAME: ' || HOLDER || ' IS TAKEN'); 
END; 
/
COMMIT WORK;
  
  --RETURNS TRUE IF THERE IS A MATCH
  CREATE OR REPLACE FUNCTION VALIDATE_FULL(USERN USERCREDENTIALS.USERNAME%TYPE,PSW USERCREDENTIALS.PSWRD%TYPE)
    RETURN VARCHAR2
AS
    VALID VARCHAR2(7);
    ANY_ROWS_FOUND NUMBER;
BEGIN 

    SELECT COUNT(*)
    INTO ANY_ROWS_FOUND
    FROM USERCREDENTIALS
    WHERE  ROWNUM = 1 AND USERN = USERNAME AND PSW = PSWRD;
    IF ANY_ROWS_FOUND = 1 THEN
    VALID := 'TRUE';
    ELSE
    VALID := 'FALSE';
    END IF;
    RETURN VALID;
END;
/
SET SERVEROUTPUT ON;

DECLARE
USERN USERCREDENTIALS.USERNAME%TYPE;
PSW USERCREDENTIALS.PSWRD%TYPE;
HOLDER VARCHAR2(7);
BEGIN 
    USERN := 'MIRANDA';
    PSW := 'ASSWORD123';
    HOLDER := VALIDATE_FULL(USERN,PSW);
   dbms_output.put_line('USERNAME: ' || HOLDER || ' IS TAKEN'); 
END; 
/
COMMIT WORK;


/*
CREATE OR REPLACE PROCEDURE USERNAME_VALIDATE(USERN IN USERCREDENTIALS.USERNAME%TYPE ,VAL OUT VARCHAR2)

IS
ANY_ROWS_FOUND NUMBER;
BEGIN
*/
/*begin
  select count(*)
  into   any_rows_found
  from   my_table
  where  rownum = 1 and
         ... other conditions ...

  if any_rows_found = 1 then
    ...
  else
    ...
  end if;
   */ /*
SELECT COUNT(*)
    INTO ANY_ROWS_FOUND
    FROM USERCREDENTIALS
    WHERE ROWNUM = 1 AND USERN = USERNAME;
    
    IF ANY_ROWS_FOUND = 1 THEN
    SELECT 'TRUE' INTO VAL FROM DUAL; */

